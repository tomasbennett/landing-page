/* The root has accessible variables in case we implement a colour changing scheme (such as dark-mode) in the future */

:root{
    --main-background-colour: #1F2937;
    --heading-large-text-colour: #F9F8FA;
    --heading-small-text-colour: #E5E7EB;
    --sign-in-background-colour: #3882F6;
}

*, *::after, *::before{
    box-sizing: border-box;
    font-family: Roboto;
    margin: 0;
    padding: 0;
}

html, body{
    display: flex;
    align-items: center;
    flex-direction: column;
    height: 100vh;
    width: 100vw;
    background-color: var(--main-background-colour);
}

header{
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 80vw;

    margin-top: 10px;
}

.header-logo{
    font-size: 24px;
}

/* 
   Apply a container query, when the screen gets too thin
   the header-logo will go into it's own row and will need
   to be bigger than when it is next to the photo.

   Ignore the font-size: 24px and apply a vw font-size
   that changes when the container size changes. 
*/

/*
    Actually trying a methodology first, use CSS and HTML
    to hold a burger bar and display: none; for it until 
    the screen gets to a certain width to see if this is the 
    meta.
*/

.header-nav-links{
    display: flex;
    justify-content: flex-end;
}

.header-logo,
.title-text h1{
    color: var(--heading-large-text-colour);
}

.header-list-links a,
.title-text p{
    color: var(--heading-small-text-colour);
}

.header-list-links{
    display: flex;
    list-style: none;
    gap: 15px;
}

.header-list-links li{
    display: flex;
}

.header-list-links a{
    text-decoration: none;
    transition: 0.3s color ease;
    font-size: 18px;
    flex-grow: 1;
}

/*
   title-container should be a flex-wrap whereby if the 
   screen gets too small the image goes to the bottom.

   NOTE: title-container will always be the same vw and
   the dimensions of the photo must remain the same but
   will have a minimum width on the next to text level.

   I'm actually just thinking now when the photo snaps
   down below the text it should originally be 80vw the
   same as the text, maybe, but when the screen shrinks
   further it should become 100vw.

   Finally, for the button, it will shrink
   and grow depending on the size of its container
   just like h1 in title-container.

   Text may stay the same size in p tags as they seem
   to for other websites stay the same size no matter 
   what.
*/


.title-container{
    display: grid;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    gap: clamp(55px, 10%, 80px);
    width: 100%;
    padding: 0 10vw;
    margin-top: 30px;
}

.title-text{
    display: flex;
    flex-direction: column;
    justify-content: center;
}

/*
   title-image img should have alt text that is centered in
   terms of position with padding so that it isn't touching
   the sides.
*/

.title-text,
.title-image{
    flex: 1;
}

.title-image{
    display: flex;
    align-items: stretch;
    justify-content: center;
    background-color: gray;
    color: var(--heading-large-text-colour);
    justify-self: flex-end;

    min-width: 490.391px;
    height: 275.844px;
    
}

.title-image img{
    text-align: center;
    padding: 10px;
    width: 100%;
    object-fit: cover;
}

.title-text h1{
    font-size: 48px;
    font-weight: 900;
}

.title-text button{
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: var(--sign-in-background-colour);
    color: var(--heading-large-text-colour);
    width: 95px;
    height: 30px;
    border-radius: 5px;
    border: 0;
    margin-top: 5px;
}

/*
   I don't know if this will be a last thing to do but when
   making the height shorter of the screen decrease the gaps
   in main-footer-container's white background section to
   bring the sections closer together until a certain point
   then just let it overflow I think.
   NOTE: We will have to set a limit on how far the gap can
   stretch out as well so that on tall screens it isn't too
   far separated.
*/

.main-footer-container{
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100vw;
    flex-grow: 1;
}

main{
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
    background-color: var(--heading-large-text-colour);
    margin-top: 80px;
    width: 100vw;
    min-height: 720px;
    height: fit-content;
    flex-grow: 1;
}

footer{
    display: flex;
    align-items: center;
    height: 40px;
    color: var(--heading-large-text-colour);
    font-size: small;
}

.main-upper{
    display: flex;
    flex-direction: column;
    align-items: center;
    width: auto;
    justify-content: space-around;
}

/*
   main-heading should simply be able to go onto two lines
   when necessary aka the screen is too thin.
*/

.main-heading{
    font-size: 36px;
    font-weight: 900;
}

/*
   The main changes will come here: 
   It needs a wider gap in 
   general.
   When the screen is incredibly wide the blocks should be
   well spaced and all on the same line
   As the screen width closes the gap shortens and the blocks
   get a little smaller until the blocks reach a certain
   width whereby it will flex-wrap making the blocks size a
   bit bigger with more of a gap again.
   This will dynamically continue with however many blocks
   there are until all blocks are on one line and reach their
   min-width where they will overflow.
   Also the text when everything is on one column will
   originally be to the right of the block until it shrinks
   and needs to go on the bottom of the blocks.
*/

.main-image-text-container{
    display: flex;
    width: 80%;
    margin-top: 20px;
}

.main-image-text-element{
    display: flex;
    flex-direction: column;
    align-items: center;
}

.main-image-text-element .main-image{
    border: 2px solid var(--sign-in-background-colour);
    border-radius: 5px;
    width: 100px;
    height: 100px;
}

.main-image-text-element .main-image img{
    max-width: 96px;
    max-height: 96px;
}

.main-image-text-element p{
    text-align: center;
    margin-top: 5px;
}

.main-paragraph-container-outer{
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    background-color: var(--heading-small-text-colour);
    min-height: 300px;
}

/*
   This should be the easiest whereby it just stacks as
   per usual.
*/

.main-paragraph-container-inner{
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    width: 70%;
    height: 80%
}

.main-paragraph-container-inner q{
    font-size: 36px;
    font-style: italic;
}

.main-paragraph-container-inner p{
    margin-top: 5px;
    align-self: flex-end;
}

/*
   call-to-action-container needs to better fit it's content
   having some padding.
   
   It needs to have a max-width because even though it won't
   match the width of the other boxes or header content
   it is better suited with a max-width.
   NOTE: It shouldn't get any smaller until the screen forces
   it to so don't use vw until it fits the size of the screen.

   It needs to flex-wrap when the screen gets too small with
   the text and button being aligned in the center.
*/

.call-to-action-container{
    display: flex;
    justify-content: space-around;
    align-items: center;
    width: 80%;
    height: 16%;
    min-height: fit-content;
    margin-bottom: 20px;
    background-color: var(--sign-in-background-colour);
    color: var(--heading-large-text-colour);
    border-radius: 5px;
}

.call-to-action-button{
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: var(--sign-in-background-colour);
    width: 95px;
    height: 30px;
    border-radius: 5px;
    border: 2px solid var(--heading-large-text-colour);
    color: var(--heading-large-text-colour);
}

.title-text button,
.call-to-action-button{
    cursor: pointer;
    transition: 0.3s ease;
    transition: 0.1s transform ease;
}

.title-text button:hover, 
.call-to-action-button:hover{
    background-color: var(--heading-large-text-colour);
    color: var(--sign-in-background-colour);
}

.title-text button:active, 
.call-to-action-button:active{
    transform: scale(0.95);
}

.header-list-links a:hover{
    color: var(--heading-large-text-colour);
}
